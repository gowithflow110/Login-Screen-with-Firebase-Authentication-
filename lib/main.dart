import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:firebase_auth/firebase_auth.dart';

import 'firebase_options.dart'; // 🔧 Auto-generated by `flutterfire configure`
import 'screens/sign_in_screen.dart';
import 'screens/cv_form_screen.dart';
import 'screens/splash_login_screen.dart'; // 👈 NEW splash screen

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const CVGeneratorApp());
}

class CVGeneratorApp extends StatelessWidget {
  const CVGeneratorApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CVGenerator',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        textTheme: GoogleFonts.poppinsTextTheme(), // ✅ Poppins globally
      ),
      home: const AuthGate(), // 👈 Auth gate handles routing
    );
  }
}

// ✅ Acts as the logic gate between splash/login/dashboard
class AuthGate extends StatelessWidget {
  const AuthGate({super.key});

  @override
  Widget build(BuildContext context) {
    // 🔍 DEBUG: Check current user status on each build
    User? user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      print('✅ User is logged in: ${user.email}');
    } else {
      print('❌ No user is logged in');
    }

    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        // ⏳ Still waiting for auth state
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const SplashLoginScreen();
        }

        // ✅ User is logged in
        if (snapshot.hasData && snapshot.data != null) {
          return const CVFormScreen();
        }

        // ❌ User not logged in
        return const SignInScreen();
      },
    );
  }
}
